<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://haoruizhi.github.io</id>
    <title>Gridea</title>
    <updated>2020-05-22T03:47:38.693Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://haoruizhi.github.io"/>
    <link rel="self" href="https://haoruizhi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://haoruizhi.github.io/images/avatar.png</logo>
    <icon>https://haoruizhi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[一道NSObject面试题下的探索]]></title>
        <id>https://haoruizhi.github.io/post/yi-dao-nsobject-mian-shi-ti-xia-de-tan-suo/</id>
        <link href="https://haoruizhi.github.io/post/yi-dao-nsobject-mian-shi-ti-xia-de-tan-suo/">
        </link>
        <updated>2020-05-22T02:55:16.000Z</updated>
        <summary type="html"><![CDATA[<p>有一道面试题问的是NSObject对象占用多少内存？<br>
回答这道面试题之前让我们先看一下Objective-C的本质</p>
<p><img src="https://haoruizhi.github.io/post-images/1590119033599.jpg" alt="" loading="lazy"><br>
这是OC语言的转化过程，本质上Objective-C的对象、类主要是基于C\C++的结构体来实现的。<br>
我们可以尝试把Objective-C代码转换为C\C++代码，具体的代码是xcrun  -sdk  iphoneos  clang  -arch  arm64  -rewrite-objc  OC源文件  -o  输出的CPP文件<br>
例如：xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc  main.m  -o main.cpp<br>
cpp文件中把NSObject对象转译为了一个结构体，<br>
struct NSObject_IMPL {<br>
Class isa;<br>
};<br>
里面仅仅还有一个isa指针<br>
看到这里我们可以回答NSObject对象内部只使用了8个字节的空间（64bit环境下，可以通过引入runtime调用class_getInstanceSize函数获得）<br>
那如果是继承自NSObect的类呢？<br>
然后我们在main.m中定义了一个person对象<br>
@interface Person : NSObject <NSCopying> {<br>
int _age;<br>
}<br>
@property (nonatomic, assign) int height;<br>
@end<br>
@implementation Person<br>
@end</p>
<p>经过转译后再cpp文件中转为了<br>
struct Person_IMPL {<br>
struct NSObject_IMPL NSObject_IVARS;<br>
int _age;<br>
int _height;<br>
};<br>
可以近似的理解为<br>
struct Person_IMPL {<br>
Class isa;<br>
int _age;<br>
int _height;<br>
};<br>
所以一个Person对象占用的内存区间是一个isa指针+两个int类型变量的值所占用的内存区间。<br>
同样在64位情况下是8+4*2 = 16个字节<br>
注意这个时候有个内存对齐的问题，比如person对象中只有一个age变量，没有height，占用的空间还是16个字节，而不是12个字节。</p>
]]></summary>
        <content type="html"><![CDATA[<p>有一道面试题问的是NSObject对象占用多少内存？<br>
回答这道面试题之前让我们先看一下Objective-C的本质</p>
<p><img src="https://haoruizhi.github.io/post-images/1590119033599.jpg" alt="" loading="lazy"><br>
这是OC语言的转化过程，本质上Objective-C的对象、类主要是基于C\C++的结构体来实现的。<br>
我们可以尝试把Objective-C代码转换为C\C++代码，具体的代码是xcrun  -sdk  iphoneos  clang  -arch  arm64  -rewrite-objc  OC源文件  -o  输出的CPP文件<br>
例如：xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc  main.m  -o main.cpp<br>
cpp文件中把NSObject对象转译为了一个结构体，<br>
struct NSObject_IMPL {<br>
Class isa;<br>
};<br>
里面仅仅还有一个isa指针<br>
看到这里我们可以回答NSObject对象内部只使用了8个字节的空间（64bit环境下，可以通过引入runtime调用class_getInstanceSize函数获得）<br>
那如果是继承自NSObect的类呢？<br>
然后我们在main.m中定义了一个person对象<br>
@interface Person : NSObject <NSCopying> {<br>
int _age;<br>
}<br>
@property (nonatomic, assign) int height;<br>
@end<br>
@implementation Person<br>
@end</p>
<p>经过转译后再cpp文件中转为了<br>
struct Person_IMPL {<br>
struct NSObject_IMPL NSObject_IVARS;<br>
int _age;<br>
int _height;<br>
};<br>
可以近似的理解为<br>
struct Person_IMPL {<br>
Class isa;<br>
int _age;<br>
int _height;<br>
};<br>
所以一个Person对象占用的内存区间是一个isa指针+两个int类型变量的值所占用的内存区间。<br>
同样在64位情况下是8+4*2 = 16个字节<br>
注意这个时候有个内存对齐的问题，比如person对象中只有一个age变量，没有height，占用的空间还是16个字节，而不是12个字节。</p>
<!-- more -->
<p>Objective-C中对象分为三类，即instance对象，class对象，meta-class对象<br>
instance对象中包含：isa指针，其他成员变量，isa指针指向class对象，每一个创建出的instance对象都不同，当然内存地址也是不同的<br>
class对象中包含：isa指针，superclass指针，类的属性信息（@property）,实例方法（-方法），协议（protocol），成员变量（ivar），isa指针指向meta-class，superclass指针指向父类<br>
meta-class对象需要调用runtime方法 object_getclass()方法获得，它有着和class对象相似的结构，包含：isa指针，superclass指针，类对象方法（+方法），isa指针指向基类NSObect的meta-class对象，superclass指针指向父类的meta-class对象，这里NSObect的meta-class对象的superclass指针比较特殊，指向NSObject的类对象。网上大神画了一张很经典的图，方便大家理解：<br>
<img src="https://haoruizhi.github.io/post-images/1590119015695.webp" alt="" loading="lazy"><br>
通过上图我们可以看出整个体系构成了一个自闭环，如果是从NSObject中继承而来的上图中的Root class就是NSObject。至此，整个实例、类对象、元类的概念也就讲清了。<br>
isa指针的作用主要是查找方法，比如子类调用父类的方法，就是一层层通过isa指针去查找的，找不到会报错method undefine。今天先写到这</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://haoruizhi.github.io/post/hello-gridea/</id>
        <link href="https://haoruizhi.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>